#!/usr/bin/env python
#
# Copyright (c) 2015 Catalyst.net Ltd
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

"""
Monitor a file for additions and removals of IP addresses. Output these changes to stdout in a format suitable for ExaBGP.

Michael Fincham <michael.fincham@catalyst.net.nz>
"""

import argparse
import re
import socket
import sys
import time
 
def valid_ip_address(address):
    """
    Lazy way to validate an IPv4 address.
    """
    try:
        socket.inet_aton(address)
    except:
        return False
    else:
        return True


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--prefix-file", metavar="PATH", type=str, required=True, help="path to prefix list that will be monitored")
    parser.add_argument("--community", metavar="COMMUNITY", type=str, default="", help="community to be attached to announced prefixes, defaults to no community")
    parser.add_argument("--next-hop", metavar="IP", type=str, default="192.0.2.1", help="next-hop to be attached to announced prefixes, defaults to 192.0.2.1")
    parser.add_argument("--interval", metavar="SECONDS", type=int, default=5, help="polling interval in seconds, defaults to 5")
    args = parser.parse_args()

    current_prefixes = set()
    community = ""

    if args.community is not "":
    
        if re.match("[0-9]+:[0-9]+", args.community):
            community = " community %s" % args.community
        else:
            sys.stderr.write("error: invalid community string\n")
            sys.exit(1)

    if not valid_ip_address(args.next_hop):
        sys.stderr.write("error: invalid next-hop address\n")
        sys.exit(1)


    while True:
        time.sleep(args.interval)
        
        try:
            with open(args.prefix_file) as prefix_file:
                requested_prefixes = set([address for address in prefix_file.read().splitlines() if valid_ip_address(address)])
        except:
            continue

        prefix = None

        for prefix in current_prefixes - requested_prefixes: # prefixes to remove
            sys.stdout.write("withdraw route %s/32 next-hop %s%s\n" % (prefix, args.next_hop, community))

        for prefix in requested_prefixes - current_prefixes: # prefixes to add
            sys.stdout.write("announce route %s/32 next-hop %s%s\n" % (prefix, args.next_hop, community))

        if prefix is not None:
            sys.stdout.flush()
            current_prefixes = requested_prefixes
            
